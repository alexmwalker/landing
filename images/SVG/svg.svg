  
    <svg  xmlns="http://www.w3.org/2000/svg" width="80%" x="100" viewBox="0 0 525 272" fill="none" >
    <style>

@import url(&quot;https://fonts.googleapis.com/css?family=Roboto+Mono&quot;);@keyframes letterfeed{0%{transform:scale(1.4,1.75) translate(-10560px,55px)}to{transform:scale(1.4,1.75) translate(0,53px)}}@keyframes codeswitch{0%,33.33%{opacity:1}33.34%,to{opacity:0}}.code-sample{font-size:14px;font-weight:500;letter-spacing:0;white-space:pre}.code-sample,.linenumbers text{font-family:&apos;Roboto Mono&apos;,monospace}.code{opacity:0;animation:codeswitch 114s infinite linear}.code text{display:block;font-family:&quot;Roboto mono&quot;,monospace;fill:#aaa;white-space:pre;font-size:11px}.code:nth-of-type(1){animation-delay:0s}.code:nth-of-type(2){animation-delay:38s}.code:nth-of-type(3){animation-delay:76s}.steps{transform:scale(1.4,1.75) translate(-10560px,55px);animation:letterfeed 38s infinite linear}.steps path{fill:rgba(24,200,70,.4);fill:#111}.activetab text,.tabs{font-family:Roboto,sans-serif;font-size:11px}.activetab text{font-weight:500;fill:#888}.activetab rect{fill:#111}.tabs{fill:#606060;white-space:pre;letter-spacing:0}text.code{fill:#aaa}#code-vue{transform:scale(.8) translate(-50px,-89px)}#code-css{transform:scale(.8) translate(40px,-89px)}#code-html{transform:scale(.8) translate(132px,-89px)}#screenpos{ transform:scale(1.3) translate(76px,70px);}


    <![CDATA[
@import url(&quot;https://fonts.googleapis.com/css?family=Roboto+Mono&quot;);
.code-sample {font-family:&apos;Roboto Mono&apos;,monospace; font-size:14px;font-weight:500;letter-spacing:0;white-space:pre}
.linenumbers text{font-family:&apos;Roboto Mono&apos;,monospace}
    

body {
  font-size: 18px;
  line-height: 24px;
}

.screen {
  background: #222;
  color: #ddd;
  padding: 1rem;
  position: relative;
  line-height: 18px;
  height: 26rem;
  background-color: #1c1c1c;
}

.code {
  opacity: 0;
  animation: codeswitch 114s infinite linear;
  /*simple switch between samples */
}
.code text {
  display: block;
  font-family: "Roboto mono", monospace;
  fill: #aaa;
  white-space: pre;
  font-size: 11px;
}

.code:nth-of-type(1) {
  animation-delay: 0s;
}

.code:nth-of-type(2) {
  animation-delay: 38s;
}

.code:nth-of-type(3) {
  animation-delay: 76s;
}

.steps {
  transform: scale(1.4, 1.75) translate(-10560px, 55px);
  animation: letterfeed 38s infinite linear;
}
.steps path {
  fill: rgba(24, 200, 70, 0.4);
  fill: #111;
}

.activetab text {
  font-family: Roboto, sans-serif;
  font-size: 11px;
  fill: #ccc;
  font-weight: 500;
  fill: #888;
}

.activetab rect {
  fill: #111;
}

.tabs {
  fill: #606060;
  white-space: pre;
  font-family: Roboto, sans-serif;
  font-size: 11px;
  letter-spacing: 0em;
}

text.code {
  fill: #aaa;
}

text .red {
  fill: #F04747;
}

text .gray {
  fill: #333;
}

text .green {
  fill: #689553;
}

text .blue {
  fill: #5598D1;
}

text .ltblue {
  fill: #9AD9FB;
}

text .fawn {
  fill: #CE9178;
}

#code-vue {
  transform: scale(0.8) translate(-50px, -89px);
}

#code-css {
  transform: scale(0.8) translate(40px, -89px);
}

#code-html {
  transform: scale(0.8) translate(132px, -89px);
}

@keyframes letterfeed {
  000% {
    transform: scale(1.4, 1.75) translate(-10560px, 55px);
  }
  100% {
    transform: scale(1.4, 1.75) translate(0, 53px);
  }
}
@keyframes codeswitch {
  000% {
    opacity: 1;
  }
  33.33% {
    opacity: 1;
  }
  33.34% {
    opacity: 0;
  }
  100% {
    opacity: 0;
  }
}
.syntax-gray {
  color: gray;
}
// ]]>
</style>

      <rect width="525" height="272" fill="#111"/>
      
      <g class="code node">
        
        <g id="code-vue" class="code-sample" >
        <g class="activetab">
          <rect x="52" y="35" width="98" height="22" />
          <use href="#icon-vue"  x="65" y="42" width="16" height="16" />
          <text class="tabs"  x="80" y="49">vue.ejs</text>
          </g>
        </g> 
        <text  fill="#E5E5E5" xml:space="preserve" ><tspan x="31" y="16.2051">var exec = require(&#39;child_process&#39;).exec;&#10;</tspan><tspan x="31" y="32.1895">exec(&#39;ls -l&#39;, function(error, stdout, stderr) {&#10;</tspan><tspan x="31" y="48.1738">    console.log(&#39;stdout: &#39; + stdout);&#10;</tspan><tspan x="31" y="64.1582">    console.log(&#39;stderr: &#39; + stderr);&#10;</tspan><tspan x="31" y="80.1426">    if (error !== null) {&#10;</tspan><tspan x="31" y="96.127">        console.log(&#39;exec error: &#39; + error);&#10;</tspan><tspan x="31" y="112.111">    }&#10;</tspan><tspan x="31" y="128.096">});</tspan></text>
      </g>
      
      <g class="code css" >
        <g id="code-css" class="code-sample" >
          <g class="activetab">
            <rect x="52" y="35" width="98" height="22" fill="#1e1e1e"/>
            <use href="#icon-css"  x="66" y="40" width="11" height="11" />
            <text class="tabs"  x="84" y="49">style.css</text>
          </g>
        </g> 
          <text   fill="#D4D4D4" xml:space="preserve" ><tspan x="31" y="16.2051">.mask {&#10;</tspan><tspan x="31" y="32.1895">  position: relative;&#10;</tspan><tspan x="31" y="48.1738">  outline: 1px green dashed;&#10;</tspan><tspan x="31" y="64.1582">  top: 10px;&#10;</tspan><tspan x="31" y="80.1426">  width: 41rem;&#10;</tspan><tspan x="31" y="96.127">  overflow: hidden;&#10;</tspan><tspan x="31" y="112.111">  height: 26rem;&#10;</tspan><tspan x="31" y="128.096">}&#10;</tspan><tspan x="31" y="144.08">&#10;</tspan><tspan x="31" y="160.064">.code:nth-of-type(1) {&#10;</tspan><tspan x="31" y="176.049">  animation-delay: 0s;&#10;</tspan><tspan x="31" y="192.033">}&#10;</tspan><tspan x="31" y="208.018">&#10;</tspan><tspan x="31" y="224.002">.code:nth-of-type(2) {&#10;</tspan><tspan x="31" y="239.986">  animation-delay: 18s;&#10;</tspan><tspan x="31" y="255.971">}</tspan></text>
      </g>
      
    <g class="code html"> 
      <g id="code-html" class="code-sample" >
        <g class="activetab">
          <rect x="52" y="35" width="98" height="22" fill="#1e1e1e"/>
          <use href="#icon-html"  x="66" y="40" width="11" height="11" />
          <text class="tabs"  x="84" y="49">laptop.html</text>
          </g>
        </g> 
      
        <text fill="#D4D4D4" xml:space="preserve" ><tspan x="24" y="16.2051">&#60;div class=&#34;form-header&#34;&#62;&#10;</tspan><tspan x="24" y="32.1895">  &#60;% if (Object.keys(errors).length === 0) { %&#62;&#10;</tspan><tspan x="24" y="48.1738">    &#60;h2&#62;Send us a message&#60;/h2&#62;&#10;</tspan><tspan x="24" y="64.1582">  &#60;% } else { %&#62;&#10;</tspan><tspan x="24" y="80.1426">    &#60;h2 class=&#34;errors-heading&#34;&#62;Oops, please correct the following:&#60;/h2&#62;&#10;</tspan><tspan x="24" y="96.127">    &#60;ul class=&#34;errors-list&#34;&#62;&#10;</tspan><tspan x="24" y="112.111">      &#60;% Object.values(errors).forEach(error =&#62; { %&#62;&#10;</tspan><tspan x="24" y="128.096">        &#60;li&#62;&#60;%= error.msg %&#62;&#60;/li&#62;&#10;</tspan><tspan x="24" y="144.08">      &#60;% }) %&#62;&#10;</tspan><tspan x="24" y="160.064">    &#60;/ul&#62;&#10;</tspan><tspan x="24" y="176.049">  &#60;% } %&#62;&#10;</tspan><tspan x="24" y="192.033">&#60;/div&#62;</tspan></text> 
      </g> 


    </svg>
