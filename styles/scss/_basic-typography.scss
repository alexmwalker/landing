/*------------------------------------*\
  #MEDIA BREAKPOINTS as SASS VARIABLES

  I'd preferred to have written these 
  as CSS variables (like most variables)
  but apparently you can't use a CSS
  variable as a breakpoint. Doesn't matter 
  much as they don't need to change to be
  dynamic. Just would have been neater.
\*------------------------------------*/ 

$bp-tablet: 48em;
$bp-laptop: 64em;
$bp-wide: 80em;



/*------------------------------------*\
  #IMPORTANT CROSS SITE CSS VARIABLES
\*------------------------------------*/


:root { 
  --typescale: 1.15; /* Mobile & default */
  /* This is the scaling factor for headings relative to the <p>. 
  ( h4 > h3 > h2 > h1). It's a 'type size ramp'.*/

  --typescale-lg: 1.25; /* Tablet, Laptop and Wide-screen */

  --baselineratio: calc(16 / 9);
  /* This is the 'line-height:basefont size' ratio ( i.e 16/9 = 1.777778) */
  /* The body font is 9/16ths of the line-height â€“ a little over half  */
  --basegrid: 32px;
  /* --basegrid is the default body text line-height grid size on phone */
  --basegrid-tablet: 28px;
  --basegrid-laptop: 32px;
  --basegrid-wide: 36px;

  --baseline: calc(var(--baselineratio) * 1rem);
  --basefont: calc(var(--basegrid) / var(--baselineratio));
  --basefont-tablet: calc(var(--basegrid-tablet) / var(--baselineratio));
  --basefont-laptop: calc(var(--basegrid-laptop) / var(--baselineratio));
  --basefont-wide: calc(var(--basegrid-wide) / var(--baselineratio));

  --basebackground: #fff; // flipped in dark mode
  --basefontcolor: #222;

  --basebackground-dark: #111518;
  --basefontcolor-dark: #ddd;

  /* Apparently you can't use CSS Variables to set breakpoint - booo..*/

  font-family: Roboto, sans-serif;
  font-weight: 300;
}

.container {
  width: 96%;
  max-width: 58rem;
  margin: 0 auto !important;
  color: var(--basefontcolor);

}



  @import url("https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400&display=swap");
  
  /*------------------------------------*\
    #:ROOT TEXT SIZE SETTINGS 
    
    This is the main 'engine' for driving
    responsive typography. 90% of scaling
    happens here.
  
  \*------------------------------------*/
  
  :root {
    /* DEFAULTS - (that means mobile) */
    font-size: var(--basefont);
    line-height: var(--baseline);
  }
  
  /* Medium devices (tablets, 48em and up)*/
  @media (min-width: $bp-tablet) {
    :root {
      font-size: var(--basefont-tablet); 
      //--typescale: 1.25;
      --typescale: var(--typescale-lg);
      /* We ramp up the typescale on non-phone screens. 
      This means h1s are larger than Ps in RELATIVE 
      terms on non-phones */
    }
  }
  
  /* Large devices (desktops, 62em and up) */
  @media (min-width: $bp-laptop) {
    :root {
      font-size: var(--basefont-laptop);
    }
  }
  
  /* Extra large devices (large desktops, 75em and up)*/
  @media (min-width: $bp-wide) {
    :root {
      font-size: var(--basefont-wide);
    }
  }

  /*------------------------------------*\
    #CORE TYPOGRAPHY (SCALED FROM :ROOT)
  \*------------------------------------*/
  h1,
  .is-size-h1 {
    font-size: calc(
      var(--typescale) * var(--typescale) * var(--typescale) * var(--typescale) *
        1rem
    );
    line-height: calc(var(--baseline) * 1.5);
    /* 3 grid lines mobile - becomes 4 on tablet + to suit larger typescale */
    //margin-top: calc(var(--baseline) / 2);
    margin-bottom: var(--baseline);
    font-weight: 400;
  }
  
  h2,
  .is-size-h2 {
    font-size: calc(
      var(--typescale) * var(--typescale) * var(--typescale) * 1rem
    );
    line-height: calc(var(--baseline) * 1.5);
    margin-top: 0rem;
    margin-bottom: calc(var(--baseline) / 2);
    font-weight: 400;
  }
  
  h3,
  .is-size-h3,
  .h3 {
    font-size: calc(var(--typescale) * var(--typescale) * 1rem);
    line-height: calc(var(--baseline) * 1);
    margin-top: 0;
    margin-bottom: calc(var(--baseline) / 2);
    font-weight: 400;
  }
  
  h4,
  .is-size-h4,
  .h4{
    font-size: calc(var(--typescale) * 1rem);
    line-height: calc(var(--baseline) * 1);
    margin-top: calc(var(--baseline) * 1);
    margin-bottom: calc(var(--baseline) / 2);
    font-weight: 400;
  }
  
  h5,
  .is-size-h5,
  .h5{
    /* h5s are same size as <p> but bolder */
    font-size: 1rem;
    line-height: calc(var(--baseline) / 1);
    margin-top: calc(var(--baseline) / 2);
    margin-bottom: calc(var(--baseline) / 1);
    font-weight: 400;
    //text-transform: capitalize;
  }
  
  h2:first-child,
  h3:first-child,
  h4:first-child,
  h5:first-child {
    margin-top: 0; // kill the top margin when first child (the container SHOULD have padding instead)
  }
  
  p,
  ul,
  ol,
  pre,
  table,
  blockquote,
  figcaption,
  .is-size-base {
    font-size: 1rem;
    font-weight: 300;
    margin-top: 0rem;
    line-height: calc(var(--baseline) / 1);
    margin-bottom: calc(var(--baseline) / 1);
  }
  
  .major {
    font-weight: 400;
    font-size: calc(
      var(--typescale) * var(--typescale) * var(--typescale) * var(--typescale) *
        var(--typescale) * 1rem
    );
    line-height: calc(var(--baseline) * 1.5);
  }
  
  .minor {
    font-size: calc(1rem / var(--typescale));
    line-height: calc(var(--baseline) / 1);
    margin-top: 0;
    margin-bottom: calc(var(--baseline) / 2);
  }
  
  .small {
    font-size: calc(1rem / var(--typescale) / var(--typescale));
    line-height: calc(var(--baseline) / 2);
    margin-top: 0;
    margin-bottom: calc(var(--baseline) / 2);
  }
  
  ul ul,
  ol ol,
  ul ol,
  ol ul {
    margin-top: 0rem;
    margin-bottom: 0rem;
  }
  
  /* Let's make sure all's aligned */
  hr,
  .hr {
    border-top: 1px solid #8c8b8b;
    margin: 0;
    height: 0;
    background: none;
  }
  
  code {
    font-family: monospace;
    background: #ddd;
    padding: 0 0.5rem;
  }
  
  sub,
  sup {
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
  
  sup {
    top: -0.5em;
  }
  
  sub {
    bottom: -0.25em;
  }
  
  a:link,
  a:visited {
    text-decoration: none;
    color: #20272f;
  }
  
  .dark a:link,
  .dark a:visited {
    text-decoration: none;
    color: #fff;
  }
  
  ::placeholder {
    color: #bbb;
  }
  input[type="checkbox"]{
    margin: 0;
  }
  /*------------------------------------*\
    #TYPOGRAPHY MEDIA TWEAKS
    The type system above automatically
    works pretty well at most sizes, but
    sometimes - usually after tyescale 
    tweaks - we need to make small manual 
    adjustments to LINE-HEIGHT and MARGIN. 
    That's what these are.
  \*------------------------------------*/
  
  /* Medium devices (tablets, 48em and up)*/
  @media (min-width: $bp-tablet) {
    h1 {
      line-height: calc(var(--baseline) * 1.5);
      margin-bottom: calc(var(--baseline) * 1);
      &.major {
        line-height: calc(var(--baseline) * 2);
      }
    }
    
    h2 {
      margin-bottom: calc(var(--baseline) * 1);
    }
  }
  
  
  .dark a:link,
  .dark a:visited {
    text-decoration: none;
    color: #fff;
  }
  
  
  
  ::placeholder {
    color: #bbb;
  }
  
  /* Useful text classes  */
  .clearright {
    clear: right
  }
  
  .clearleft {
    clear: left
  }
  
  .clearboth {
    clear: both
  }
  
  .textcenter {
    text-align: center
  }
  
  .textleft {
    text-align: left
  }
  
  .textright {
    text-align: right
  }